<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard</title>
  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: Arial, sans-serif;
      background: #f4f4f4;
      line-height: 1.4;
    }

    .topbar {
      background: #333;
      color: white;
      padding: 10px 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: fixed;
      width: 100%;
      top: 0;
      z-index: 100;
      height: 44px;
    }

    .title {
      font-size: 18px;
    }

    .hamburger {
      cursor: pointer;
      font-size: 22px;
      padding: 5px;
      display: block;
    }

    .sidebar {
      width: 250px;
      background-color: #222;
      color: white;
      height: 100vh;
      position: fixed;
      top: 0;
      left: -250px;
      transition: left 0.3s ease;
      z-index: 101;
      overflow-y: auto;
    }

    .sidebar.open {
      left: 0;
    }

    .sidebar-header {
      text-align: center;
      padding: 15px;
      background: #111;
      margin-top: 44px;
    }

    .sidebar-header img {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      margin-bottom: 8px;
      background-color: #4b5563;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 24px;
    }

    .sidebar a {
      padding: 12px 20px;
      text-decoration: none;
      color: white;
      display: block;
      border-bottom: 1px solid #333;
      font-size: 14px;
    }

    .sidebar a:hover {
      background: #575757;
    }

    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.4);
      display: none;
      z-index: 99;
    }

    .dashboard {
      margin-top: 44px;
      padding: 15px;
      transition: margin-left 0.3s ease;
    }

    .sidebar.open ~ .dashboard {
      margin-left: 250px;
    }
    #profileImage{
      background-color: blue;
      font-size: 4rem;
      font-weight: bolder;
      width: 5.5rem;
      height: 5.5rem;
      border-radius: 50%;
      text-align: center;
    }

    #log_out {
      background-color: red;
      border: none;
      color: white;
      font-family: sans-serif;
      font-size: large;
      font-weight: bold;
      border-radius: 5px;
      text-align: center;
      width: auto;
      margin-top: 10px;
      padding: 8px 16px;
      cursor: pointer;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .stat-card {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .stat-card h3 {
      color: #6b7280;
      font-size: 14px;
      margin-bottom: 10px;
    }

    .stat-card .value {
      font-size: 24px;
      font-weight: bold;
      color: #1f2937;
    }

    .chart-container {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }

    .recent-activity {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .activity-item {
      padding: 10px 0;
      border-bottom: 1px solid #e5e7eb;
    }

    .activity-item:last-child {
      border-bottom: none;
    }

    /* Media query for larger screens */
    @media (min-width: 768px) {
      .hamburger {
        display: none;
      }

      .sidebar {
        left: 0;
      }

      .dashboard {
        margin-left: 250px;
      }

      .overlay {
        display: none !important;
      }
    }

    /* Close button for sidebar on mobile */
    .close-sidebar {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      color: white;
      cursor: pointer;
      display: block;
    }

    @media (min-width: 768px) {
      .close-sidebar {
        display: none;
      }
    }
  </style>
</head>
<body>

  <div class="topbar">
    <div class="title">Welcome <span id="welcomeName"></span></div>
    <div class="hamburger" onclick="toggleSidebar()">☰</div>
  </div>

  <div class="overlay" onclick="toggleSidebar()"></div>

  <div class="sidebar" id="sidebar">
    <div class="sidebar-header">
      <span class="close-sidebar" onclick="toggleSidebar()">×</span>
      <div id="profileImage" class="mx-auto" ></div>
      <h2 id="userName"></h2>
      <button id="log_out">Log Out</button>
    </div>
    <a href="#">Tutorials</a>
    <a href="#">Materials</a>
    <a href="add_user.html">Add User</a>
    <a href="#">Questions</a>
  </div>


  <!-- Firebase SDK -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-app.js";
    import {
      getAuth,
      signOut,
      onAuthStateChanged
    } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-auth.js";
    import {
      getFirestore,
      getDoc,
      doc
    } from "https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore.js";

    // Firebase Config (same as login page)
    const firebaseConfig = {
      apiKey: "AIzaSyD-0U4u_cXEoVuZEG30yod7xLKtVGvq2Xg",
authDomain: "learning-app-6b4c6.firebaseapp.com",
projectId: "learning-app-6b4c6",
storageBucket: "learning-app-6b4c6.firebasestorage.app",
messagingSenderId: "708467904968",
appId: "1:708467904968:web:1f1f5b9ccbeb0735c370fd",
measurementId: "G-K4JEQBQ0CX"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    // Check authentication state
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        // User is signed in
        try {
          // Get user data from Firestore
          const userDoc = await getDoc(doc(db, "users", user.uid));

          if (userDoc.exists()) {
            const userData = userDoc.data();

            // Display user information
            document.getElementById('welcomeName').textContent = userData.fName;
            document.getElementById('userName').textContent = `${userData.fName} ${userData.lName}`;

            // Set profile image initials
            const profileImage = document.getElementById('profileImage');
            if (userData.fName && userData.lName) {
              profileImage.textContent = userData.fName[0] + userData.lName[0];
            } else if (userData.fName) {
              profileImage.textContent = userData.fName[0];
            }
          } else {
            console.error("No user data found!");
            // Fallback to auth display name if available
            const displayName = user.displayName || "User";
            document.getElementById('welcomeName').textContent = displayName;
            document.getElementById('userName').textContent = displayName;

            // Set profile image initials
            const profileImage = document.getElementById('profileImage');
            if (displayName.includes(' ')) {
              const names = displayName.split(' ');
              profileImage.textContent = names[0][0] + names[names.length-1][0];
            } else {
              profileImage.textContent = displayName[0];
            }
          }
        } catch (error) {
          console.error("Error getting user data:", error);
          // Fallback to auth info
          const displayName = user.displayName || "User";
          document.getElementById('welcomeName').textContent = displayName;
          document.getElementById('userName').textContent = displayName;

          // Set profile image initials
          const profileImage = document.getElementById('profileImage');
          if (displayName.includes(' ')) {
            const names = displayName.split(' ');
            profileImage.textContent = names[0][0] + names[names.length-1][0];
          } else {
            profileImage.textContent = displayName[0];
          }
        }
      } else {
        // User is signed out, redirect to login
        window.location.href = "index.html";
      }
    });

    // Sidebar toggle function
    window.toggleSidebar = function() {
      const sidebar = document.getElementById('sidebar');
      const overlay = document.querySelector('.overlay');
      const isOpen = sidebar.classList.contains('open');

      if (isOpen) {
        sidebar.classList.remove('open');
        overlay.style.display = 'none';
      } else {
        sidebar.classList.add('open');
        overlay.style.display = 'block';
      }
    };

    // Close sidebar when clicking outside on mobile
    document.querySelector('.overlay').addEventListener('click', function() {
      if (window.innerWidth < 768) {
        toggleSidebar();
      }
    });

    // Logout functionality
    document.getElementById('log_out').addEventListener('click', () => {
      const confirmLogout = confirm("Are you sure you want to log out?");
      if (confirmLogout) {
        signOut(auth).then(() => {
          // Sign-out successful, redirect to login
          window.location.href = "index.html";
        }).catch((error) => {
          console.error("Logout error:", error);
          alert("Error signing out. Please try again.");
        });
      }
    });

    // Auto-close sidebar when window is resized to desktop size
    window.addEventListener('resize', function() {
      if (window.innerWidth >= 768) {
        document.getElementById('sidebar').classList.remove('open');
        document.querySelector('.overlay').style.display = 'none';
      }
    });
  </script>

</body>
</html>
