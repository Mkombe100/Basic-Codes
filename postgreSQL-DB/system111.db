CREATE TABLE admin (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    role VARCHAR(20) DEFAULT 'admin'
);

CREATE TABLE student (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    contact_info VARCHAR(20),
    address VARCHAR(100),
    year_of_birth INT CHECK (year_of_birth > 1900),
    admin_id INT REFERENCES admin(id) ON DELETE SET NULL
);

CREATE TABLE instructor (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    specialization VARCHAR(100),
    contact_info VARCHAR(20),
    admin_id INT REFERENCES admin(id) ON DELETE SET NULL
);

CREATE TABLE courses (
    id SERIAL PRIMARY KEY,
    course_title VARCHAR(100) NOT NULL,
    course_code VARCHAR(20) UNIQUE NOT NULL,
    course_description TEXT,
    instructor_id INT REFERENCES instructor(id) ON DELETE SET NULL,
    admin_id INT REFERENCES admin(id) ON DELETE SET NULL
);

CREATE TABLE tools (
    id SERIAL PRIMARY KEY,
    tool_type VARCHAR(50) NOT NULL,
    tool_code VARCHAR(20) UNIQUE NOT NULL,
    tool_title VARCHAR(100) NOT NULL,
    course_id INT REFERENCES courses(id) ON DELETE CASCADE,
    admin_id INT REFERENCES admin(id) ON DELETE SET NULL
);

CREATE TABLE certificates (
    id SERIAL PRIMARY KEY,
    student_id INT NOT NULL REFERENCES student(id) ON DELETE CASCADE,
    course_id INT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
    issued_date DATE NOT NULL DEFAULT CURRENT_DATE,
    admin_id INT REFERENCES admin(id) ON DELETE SET NULL
);

-- Many-to-many: students enrolled in courses
CREATE TABLE student_courses (
    student_id INT NOT NULL REFERENCES student(id) ON DELETE CASCADE,
    course_id INT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    PRIMARY KEY (student_id, course_id)
);
